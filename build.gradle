ext {
    claraVersion = 'jclara:4.3-SNAPSHOT'
    claraDependency = "org.jlab.coda:${claraVersion}"
    claraMavenRepo = 'http://clasweb.jlab.org/clas12maven/'

    // try to find OpenCV
    def baseDirs = [ '/usr/local/opt/opencv3', '/opt/opencv3', '/usr/local', '/usr']
    def javaDir = '/share/OpenCV/java/'
    if (!project.hasProperty('opencvDir')) {
        opencvDir = baseDirs.find { new File(it + javaDir).exists() }
        if (opencvDir == null) {
            throw new GradleException('Missing OpenCV install directory. Set the \'opencvDir\' property.')
        }
    }
    opencvJavaDir = opencvDir + javaDir
}

allprojects {
    defaultTasks 'build'
}

//////////////////////////////////////////////////////////////////////////////
// all subprojects
//////////////////////////////////////////////////////////////////////////////

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'

    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'

    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'org.jlab.clara'

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    configurations {
        testCompile.extendsFrom compileOnly
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }

    javadoc {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    test {
        testLogging {
            exceptionFormat = 'full'
        }
        systemProperty 'java.library.path', opencvJavaDir
    }
}

//////////////////////////////////////////////////////////////////////////////
// specific subprojects
//////////////////////////////////////////////////////////////////////////////


project(':legacy') {
    archivesBaseName = 'demo-legacy'
    version = '0.1-SNAPSHOT'

    dependencies {
        compile fileTree(dir: opencvJavaDir)
        compile 'net.lingala.zip4j:zip4j:1.3.2'
    }
}


project(':data') {
    archivesBaseName = 'demo-data'
    version = '0.1-SNAPSHOT'

    repositories {
        maven {
            url claraMavenRepo
        }
    }

    dependencies {
        compileOnly claraDependency
        compile project(':legacy')
    }
}


project(':services') {
    archivesBaseName = 'demo-services'
    version = '0.1-SNAPSHOT'

    repositories {
        maven {
            url claraMavenRepo
        }
    }

    dependencies {
        compileOnly claraDependency
        compile project(':legacy')
        compile project(':data')
        compile 'org.json:json:20160810'
    }
}

//////////////////////////////////////////////////////////////////////////////
// service deployment
//////////////////////////////////////////////////////////////////////////////

project(':services') {

    def deploySpec = copySpec {
        into ('plugins/demo/lib') {
            from configurations.runtime
        }
        into ('plugins/demo/services') {
            from jar.archivePath
        }
    }

    task deploy(type: Copy, dependsOn: jar) {
        def dest = "$System.env.CLARA_HOME"

        into dest
        with deploySpec

        doFirst {
            if (dest == 'null') {
                throw new GradleException('CLARA_HOME not set')
            }
        }
    }
}


//////////////////////////////////////////////////////////////////////////////
// quality check
//////////////////////////////////////////////////////////////////////////////

subprojects {
    checkstyle {
        toolVersion = '8.8'
        configFile = rootProject.file('config/quality/checkstyle.xml')
        configProperties['samedir'] = rootProject.file('config/quality')
    }

    findbugs {
        toolVersion = '3.0.1'
        ignoreFailures = true
        effort = 'default'
        reportLevel = 'medium'
        excludeFilter = rootProject.file('config/quality/findbugs-exclude.xml')
    }

    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    // Marker task to enable findbugs.
    task findbugs(
        group: 'Verification',
        description: 'Marker task to enabled findbugs.'
    )

    gradle.taskGraph.whenReady { taskGraph ->
        tasks.findbugsMain.onlyIf {
            taskGraph.hasTask((tasks.findbugs))
        }
        tasks.findbugsTest.onlyIf {
            taskGraph.hasTask((tasks.findbugs))
        }
    }
}

//////////////////////////////////////////////////////////////////////////////
// IDE configuration
//////////////////////////////////////////////////////////////////////////////

subprojects {
    // Make sure Eclipse finds OpenCV native libraries
    eclipse {
        classpath {
            file {
                whenMerged { classpath ->
                    //remove all native libraries from direct dependencies
                    classpath.entries.removeAll { entry ->
                        entry.kind == 'lib' &&
                            (entry.path.endsWith('.dll')
                                || entry.path.endsWith('.so')
                                || entry.path.endsWith('.dylib'))
                    }
                    //but add them as native libraries
                    classpath.entries.each { entry ->
                        if (entry.kind == 'lib' && entry.path.contains('opencv')) {
                            entry.setNativeLibraryLocation(opencvJavaDir)
                        }
                    }
                }
            }
        }
    }
}
